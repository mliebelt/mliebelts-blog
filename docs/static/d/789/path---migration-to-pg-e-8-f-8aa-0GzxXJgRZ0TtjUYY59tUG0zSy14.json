{"data":{"site":{"siteMetadata":{"title":"mliebelt Starter Blog","author":"Markus Liebelt"}},"markdownRemark":{"id":"7ed2d8b0-c6e3-5f13-8272-83a0ee212f7a","excerpt":"Current situation I have developed many years ago two Rails applications and have used them many years. I started with nearly no know-how, so I took all…","html":"<h1>Current situation</h1>\n<p>I have developed many years ago two Rails applications and have used them many years. I started with nearly no know-how, so I took all defaults. I was glad at that time that I did not have to manage a full blown database to run my small Rails apps.</p>\n<p>Time has changed, and nowadays, I have docker locally running under Windows 10, with only 2 minutes work to have a current PostgreSQL server up and running. So I decided to give it a try again, and to see if it would be possible to run the applications inside a docker container, connecting to PostgreSQL. This blog post is mostly about the migration task. I will later follow up with more stories about containerizing it, and (at the end hopefully) run it on the internet to have it available all the time.</p>\n<p>So I took the following steps:</p>\n<ol>\n<li>Checking that I can have a PostgreSQL database up and running, and have a new example application connected to it.</li>\n<li>Creating all necessary things to have the relevant databases created.</li>\n<li>Migrating all data to the database (the production one).</li>\n<li>Running the adapted application against the new database.</li>\n</ol>\n<h2>Setup PostgreSQL and Example Application</h2>\n<h3>Setup PostgreSQL</h3>\n<p>… as Docker container: <code class=\"language-text\">docker run --name rails_db -p 5439:5432 -e POSTGRES_DB=rails_db -d postgres:9.6.8-alpine</code></p>\n<p>What does this do?</p>\n<ul>\n<li>Start a new docker container, that uses the predefined docker image named <code class=\"language-text\">postgres:9.6.8-alpine</code>. (The reason I use that version is that we use exactly that version at work, so feel free to use any other current version)</li>\n<li>\n<p>Give that container the name <code class=\"language-text\">rails_db</code>, so it is easier later to start that container by give the name only.</p>\n<ul>\n<li>Stop: <code class=\"language-text\">docker stop rails_db</code></li>\n<li>Start: <code class=\"language-text\">docker start rails_db</code></li>\n</ul>\n</li>\n<li>\n<p>Define the relevant resources:</p>\n<ul>\n<li>the databases (I am using only 2 of the 3 in Rails)</li>\n<li>the users</li>\n</ul>\n</li>\n</ul>\n<p>I used pgAdmin to do it, your steps may be different here.</p>\n<h4>Current state</h4>\n<p>You now have a new database server named rails_db, but without any database, users, …</p>\n<h4>Creating System Users</h4>\n<p>To use the database, you need system users to do that.</p>\n<ol>\n<li>Go to the database server.</li>\n<li>Go to Login/Group Roles and select <code class=\"language-text\">Create Login/Group Role...</code></li>\n<li>Enter the name of the user (General), the password (Definition), the privileges (Login, Create Database)</li>\n</ol>\n<h4>Creating Database</h4>\n<p>Create a database by doing the following steps.</p>\n<ol>\n<li>Go to the database server.</li>\n<li>Go to Databases > Create > Database…</li>\n<li>Enter as properties: name, the owner</li>\n</ol>\n<p>You should now be able to login as that user, go to the database, and create something.</p>\n<h3>Create Example Application</h3>\n<p>I found the <a href=\"https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres\">following recipe</a> to setup a dockerized Rails app. Here are the relevant steps to just create the application locally.</p>\n<ol>\n<li><code class=\"language-text\">rails new myapp --database=postgresql</code> Generates a new app with postgresql set as database</li>\n<li>Go to <code class=\"language-text\">database.yml</code> and ensure that database, username and password are set.</li>\n<li>Run <code class=\"language-text\">rake db:setup</code> and see if that runs through. If yes, your database is created, but empty.</li>\n<li>Run <code class=\"language-text\">rails g scaffold Post title:string body:text</code> and again <code class=\"language-text\">rake db:setup</code>.</li>\n<li>Run your application with <code class=\"language-text\">rails server</code>, and visit it under <a href=\"localhost:3000/posts\">localhost:3000/posts</a>.</li>\n<li>Create a new blog post.</li>\n<li>Visit your database (with pgAdmin) and see that the database is created, and one record exists in the table <code class=\"language-text\">posts</code>.</li>\n</ol>\n<p>So you have seen that the database is working, and a new Rails app is able to use that database.</p>\n<h2>Setup the real database then</h2>\n<p>Repeat the steps to create the real database for your application. Necessary are:</p>\n<ul>\n<li>Create the database itself.</li>\n<li>Create a user for that database.</li>\n<li>Make that user the owner of the database.</li>\n</ul>\n<h2>Migrating the data</h2>\n<p>Now comes the hard part. I have read a little bit about a tool named pgloader which sounded reasonable, and I have seen that this tool is available as docker container. So I took that road then. Here are the steps that were necessary for me:</p>\n<ol>\n<li>Enable in docker that the volume c: is mapped.</li>\n<li>\n<p>Start in the directory of your application the command: <code class=\"language-text\">docker run --rm -i -t -v c:/Users/mliebelt/dev/priv:/usr/src/apps dimitri/pgloader bash</code></p>\n<ul>\n<li>Remove the container after it is finished.</li>\n<li>Map a volume of the current directory to the directory inside the container named <code class=\"language-text\">/usr/src/apps</code>.</li>\n<li>Go inside the container and open a bash there.</li>\n</ul>\n</li>\n<li>Go to the directory where your sqlite3 db file is located.</li>\n<li>Find out the IP address of your running postgresql database server. </li>\n<li>\n<p>Enter there the command: <code class=\"language-text\">pgloader prod.db postgresql://&lt;username&gt;:&lt;pwd&gt;@&lt;ip-address&gt;:5439/&lt;database&gt;</code></p>\n<ul>\n<li><code class=\"language-text\">&lt;username&gt;</code> is the system user that has access to the database</li>\n<li><code class=\"language-text\">&lt;pwd&gt;</code> is the password of that system user</li>\n<li><code class=\"language-text\">&lt;ip-address&gt;</code> Local IP address of my computer, in Windows found with: <code class=\"language-text\">ipconfig</code></li>\n<li>5439: The port I have mapped the local database port from the docker container running</li>\n<li><code class=\"language-text\">&lt;database&gt;</code> is the name of the database</li>\n</ul>\n</li>\n</ol>\n<p>When executin the migration, I got the following output.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">WARNING:\nCouldn<span class=\"token string\">'t re-execute SBCL with proper personality flags (/proc isn'</span>t mounted? setuid?<span class=\"token punctuation\">)</span>\nTrying to <span class=\"token keyword\">continue</span> anyway.\n2018-12-22T14:29:47.069000Z LOG Migrating from <span class=\"token comment\">#&lt;SQLITE-CONNECTION sqlite:///usr/src/apps/minds/db/prod.db {1005F72BE3}></span>\n2018-12-22T14:29:47.071000Z LOG Migrating into <span class=\"token comment\">#&lt;PGSQL-CONNECTION pgsql://&lt;username>@&lt;ip-address>:5439/&lt;database> {10061BB263}></span>\n2018-12-22T14:29:47.447000Z LOG report summary reset\n             table name     errors       rows      bytes      total <span class=\"token function\">time</span>\n-----------------------  ---------  ---------  ---------  --------------\n                  fetch          0          0                     0.000s\n        fetch meta data          0         21                     0.033s\n         Create Schemas          0          0                     0.000s\n       Create SQL Types          0          0                     0.005s\n          Create tables          0         20                     0.056s\n         Set Table OIDs          0         10                     0.006s\n-----------------------  ---------  ---------  ---------  --------------\n                notices          0        500   205.5 kB          0.040s\n                 people          0        925   162.9 kB          0.025s\n      schema_migrations          0         22     0.2 kB          0.024s\n                  pages          0         58    49.6 kB          0.039s\n              book_rows          0        129     8.6 kB          0.065s\n               sessions          0        170    58.6 kB          0.093s\n      people_ressources          0       1129    59.2 kB          0.025s\n              citations          0          5     2.4 kB          0.009s\n          books_authors          0          0                     0.024s\n             ressources          0        982   363.6 kB          0.108s\n-----------------------  ---------  ---------  ---------  --------------\nCOPY Threads Completion          0          4                     0.159s\n         Create Indexes          0         11                     0.069s\n Index Build Completion          0         11                     0.012s\n        Reset Sequences          0          7                     0.013s\n           Primary Keys          0          8                     0.010s\n    Create Foreign Keys          0          0                     0.000s\n        Create Triggers          0          0                     0.000s\n       Install Comments          0          0                     0.000s\n-----------------------  ---------  ---------  ---------  --------------\n      Total <span class=\"token function\">import</span> <span class=\"token function\">time</span>          ?       3920   910.4 kB          0.263s</code></pre></div>\n<p>I was really astonished how fast the migration ran. And I could then check the result by going directly to the database and see that it is working.</p>\n<h2>Switch to the new database</h2>\n<p>Everything is now ripe to be run. Only the file <code class=\"language-text\">database.yml</code> of the application has to be adapted. I did the following changes.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">default: &amp;default\n  adapter: postgresql\n  encoding: unicode\n  pool: 5\n  timeout: 5000\n\ndevelopment:\n  &lt;&lt;: *default\n  database: &lt;database&gt;\n  username: &lt;username&gt;\n  password: &lt;pwd&gt;\n  port: 5439\n\n# Not touched\ntest:\n  adapter: sqlite3\n  pool: 5\n  timeout: 5000\n  database: db/test.sqlite3\n\nproduction:\n  &lt;&lt;: *default\n  database: &lt;database&gt;\n  username: &lt;username&gt;\n  password: &lt;pwd&gt;\n  port: 5439</code></pre></div>\n<p>Caveat: I had to change the port of the database, because the default one (5432) was already taken. The application works like a charm, now I have to check how to drive it in the cloud (as docker container). But that will be another story …</p>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://forums.docker.com/t/volume-mounts-in-windows-does-not-work/10693/5\">https://forums.docker.com/t/volume-mounts-in-windows-does-not-work/10693/5</a> How to ensure that Windows volumes can be mapped.</li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres\">https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres</a> Similar tutorial to mine, with some missing parts in it.</li>\n<li><a href=\"https://pgloader.readthedocs.io/en/latest/pgloader.html#target-connection-string\">https://pgloader.readthedocs.io/en/latest/pgloader.html#target-connection-string</a> Details about the connection string to be used in the migration</li>\n</ul>","frontmatter":{"title":"Migrating from Sqlite3 to PostgreSQL for Rails application","date":"December 22, 2018","tags":["rails","sqlite3","postgresql"]}}},"pageContext":{"slug":"/migration-to-pg/","previous":{"fields":{"slug":"/jekyll-haml-sass/"},"frontmatter":{"title":"Jekyll with HAML and SASS","path":"/jekyll-haml-sass","tags":["jekyll","blog"],"posttype":"blog","author":null}},"next":{"fields":{"slug":"/rails-docker-compose/"},"frontmatter":{"title":"Migrating from Windows based development to Docker based development","path":"/rails-docker-compose","tags":["rails","docker"],"posttype":"blog","author":null}}}}