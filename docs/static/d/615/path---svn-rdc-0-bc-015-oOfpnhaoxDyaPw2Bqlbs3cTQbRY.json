{"data":{"site":{"siteMetadata":{"title":"mliebelt Starter Blog","author":"Markus Liebelt"}},"markdownRemark":{"id":"5bc10eb6-affb-582a-90d3-59b0298b3bf3","excerpt":"Problem When you have worked in the past (as I have from at least Subversion 1.2 in 2005, a century in computer science)\nwith Subversion, and not only on open…","html":"<h1>Problem</h1>\n<p>When you have worked in the past (as I have from at least Subversion 1.2 in 2005, a century in computer science)\nwith Subversion, and not only on open source projects with a few people, but with hundreds of people in big projects\nat several location, there is one (small, but nasty) problem that plagued all of us here or there.</p>\n<p><strong>Client side configuration is something you don’t have under control, and there is no way to push it down\nwherever the people you are working with are sitting.</strong></p>\n<p>Here are a few examples what may happen in your project (and no, they are not at all contrived):</p>\n<ul>\n<li>A business consultant has started a new specification of a CR demanded by the customer. As usual, he does that\nby using the normal <code class=\"language-text\">*.docx</code> template that is used in the project. Because he is not aware of the mechanics of Subversion,\nhe has not changed his client configuration. He stores the files, commits everything that was changed (as always) and goes\nhome. The next day, another consultant has started to review the document, and inserted there some comments and\nchanges. In the meanwhile, the original consultant has repeated and continued to work with his document.\nNow both store their document, commit it, and the second one gets an error, and when he tries to dupdate the document,\nSubversion tells him that it is not able to merge the 2 versions.</li>\n<li>MORE TO COME</li>\n</ul>\n<h1>Solution up to 1.7</h1>\n<p>All people working in projects that use Subversion up to 1.7 have to tune their client configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">enable-auto-props = yes\n*.docx = svn:needs-lock=*</code></pre></div>\n<p>He has to find that configuration file on its laptop in the directory <code class=\"language-text\">C:\\Users\\&lt;NAME&gt;\\AppData\\Roaming\\Subversion</code>,\nor find the settings in TortoiseSVN.</p>\n<h1>Problems with that approach</h1>\n<p>There are numerous problems with that approach:</p>\n<ul>\n<li>It is error-prune. Everyone has to do something and every change has to be replicated by everyone at the same time.</li>\n<li>It is not multi-tenant aware. What if the people work in more than one project with different requirements for the\nclient configuration? They have to build their own superset which works and fulfills all requirements at the same time.</li>\n</ul>\n<h1>Solution with 1.8 (TADAAAA!!!)</h1>\n<p>With the version 1.8 this situation has now a simple solution (in most cases). It goes like that:</p>\n<ul>\n<li>Instead of storing the configuration in the client config file (which could be used in the future as well), you are\nnow able to store the so-called repository dictated configuration (RDC) in the repository itself.</li>\n<li>There you have to decide, where to store the properties. Files inserted in that directory or sub-directories will\ninherit these properties automatically.</li>\n<li>Instead of inheritable properties in the past, this even works when you don’t check out the directory, that has\ndefined the properties, but a sub-directory.</li>\n</ul>\n<h1>References</h1>\n<p>See the following references for missing details:</p>\n<ul>\n<li><a href=\"https://subversion.apache.org/docs/release-notes/1.8.html#repos-dictated-config\">Apache Subversion 1.8 Release Notes</a>\nGives an overview, references some more documentation.</li>\n<li><a href=\"http://blogs.collab.net/subversion/repository-dictated-configuration-part-1-of-3-inheritable-properties\">RDC Part 1: Inheritable Properties</a>\nTheory that is then needed in the 2 other blogs (see below)</li>\n<li><a href=\"http://blogs.collab.net/subversion/the-road-to-repository-dictated-configuration-day-2-autoprops\">RDC Part 2: Auto-Props</a>\nSecond part that makes concrete how to dictate auto-props of all clients.</li>\n<li><a href=\"http://blogs.collab.net/subversion/repository-dictated-configuration-day-3-global-ignores\">RDC Part 3: Global Ignores</a>\nLast part that explains how to define global ignores.</li>\n</ul>","frontmatter":{"title":"Subversion 1.8 - Repository Dictated Configuration","date":"October 11, 2014","tags":["svn"]}}},"pageContext":{"slug":"/svn-rdc/","previous":{"fields":{"slug":"/jekyll-first-steps/"},"frontmatter":{"title":"Jekyll -- First steps ...","path":"/jekyll-first-steps","tags":["jekyll","blog"],"posttype":"blog","author":null}},"next":{"fields":{"slug":"/passwords/"},"frontmatter":{"title":"Passwords in the company world","path":"/passwords","tags":["company"],"posttype":"blog","author":null}}}}