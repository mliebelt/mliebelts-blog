{"data":{"site":{"siteMetadata":{"title":"mliebelt Starter Blog","author":"Markus Liebelt"}},"markdownRemark":{"id":"a69bf052-d647-53d4-b340-6b946da73d3f","excerpt":"Current situation I have developed over the last 12 years or so all the time on Windows (starting with XP, then 7, and lately with Windows 10). And I was all…","html":"<h1>Current situation</h1>\n<p>I have developed over the last 12 years or so all the time on Windows (starting with XP, then 7, and lately with Windows 10). And I was all the time jalous about all the nice guys that were able to develop with Linux, Mac, … </p>\n<p>Lately I changed jobs and I am working now with Docker, Kubernetes, and a lot of nice stuff. So I wanted to give my Rails development another try. I had the following in plan:</p>\n<ul>\n<li>Switch from Sqlite3 to PostgreSQL (see <strong>Link</strong>)</li>\n<li>Switch to a deployment that is Docker based</li>\n</ul>\n<p>So the natural selection of tools here was to use docker-compose. The following is based on some of the experiences I made in using the book “Docker for Rails Developers”.</p>\n<h2>Dockerize the Rails application</h2>\n<p>That was really nicely described, I just show the result I got from there.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">FROM ruby:2.5\nLABEL maintainer<span class=\"token operator\">=</span><span class=\"token string\">\"markusliebelt@gmail.com\"</span>\n\nRUN <span class=\"token function\">apt-get</span> update -yqq <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> -yqq --no-install-recommends nodejs\n\nCOPY Gemfile* /usr/src/app/\nWORKDIR /usr/src/app\nRUN bundle <span class=\"token function\">install</span>\n\nCOPY <span class=\"token keyword\">.</span> /usr/src/app/\n\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"bin/rails\"</span>, <span class=\"token string\">\"s\"</span>, <span class=\"token string\">\"-e\"</span>, <span class=\"token string\">\"production\"</span>, <span class=\"token string\">\"-b\"</span>, <span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>What are the tricks here:</p>\n<ul>\n<li>The apt-get commands ensure that the base image is up-to-date all the time.</li>\n<li>Having first the Gemfiles copied, I ensure that the expensive part (getting again all gems updated) is only done when the gems change, but not on any other change.</li>\n<li><code class=\"language-text\">-b 0.0.0.0</code> binds the started Rails server to all IP addresses he may have, not only localhost. So the running application is reachable from outside the container (which is of course necessary).</li>\n</ul>\n<p>So by using <code class=\"language-text\">docker build -t railsapp .</code> (this is the root directory of your application, and the Dockerfile is created there) docker will create a new image with the name <code class=\"language-text\">railsapp</code>.</p>\n<p>So you are now able to run your rails app by calling <code class=\"language-text\">docker run -p 3000:3000 railsapp</code>.</p>\n<h2>Using docker-compose</h2>\n<p>Every Rails application comes not only with a web frontend, but a database. And both have to be running, so it feels more natural to have docker manage both containers, the one for the application, and the other for the database.</p>\n<p>To do that, <code class=\"language-text\">docker-compose</code> is just the right tool to do that. My final file looked like that (located in directory <code class=\"language-text\">myapp</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">version: <span class=\"token string\">'3.3'</span>\n\nservices:\n  web:\n    build: <span class=\"token keyword\">.</span>\n    ports:\n      - <span class=\"token string\">\"5001:3000\"</span>\n    volumes:\n      - .:/usr/src/app\n    env_file: \n      - .env/development/database\n      - .env/development/web\n  database:\n    image: postgres\n    ports:\n      - <span class=\"token string\">\"5438:5432\"</span>\n    env_file: \n      - .env/development/database</code></pre></div>\n<p>Let me explain the different parts of it:</p>\n<ul>\n<li><code class=\"language-text\">services</code> defines the different services that are managed by compose.</li>\n<li><code class=\"language-text\">web</code> name given to the Rails application, will lead to <code class=\"language-text\">myapp_web_1</code> as the name for the image created.</li>\n<li><code class=\"language-text\">ports:</code>\n<code class=\"language-text\">- &quot;5001:3000&quot;</code> publishes the Rails app run under 3000 on the port 5001</li>\n<li><code class=\"language-text\">volumes</code> provides access to the current directory inside the running Rails app. So ressources created there (under <code class=\"language-text\">/usr/src/app</code>) will be located in the current directory.</li>\n<li>`database</li>\n</ul>","frontmatter":{"title":"Migrating from Windows based development to Docker based development","date":"December 28, 2018"}}},"pageContext":{"slug":"/rails-docker-compose/","previous":{"fields":{"slug":"/migration-to-pg/"},"frontmatter":{"title":"Migrating from Sqlite3 to PostgreSQL for Rails application"}},"next":null}}